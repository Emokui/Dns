[Script]


BlumAutoClicker = type=http-response, pattern=https://telegram.blum.codes/*, requires-body=true, max-size=0, script-content=autoClickScript

[MITM]
hostname = telegram.blum.codes

[Script]
autoClickScript = type=http-response, pattern=https://telegram.blum.codes/*, requires-body=true, max-size=0, script-content="
const body = $response.body;

const script = \`
(function() {
  let GAME_SETTINGS = {
    minBombHits: Math.floor(Math.random() * 2),
    minIceHits: Math.floor(Math.random() * 2) + 2,
    flowerSkipPercentage: Math.floor(Math.random() * 11) + 15,
    minDelayMs: 2000,
    maxDelayMs: 5000,
    autoClickPlay: false
  };

  let isGamePaused = false;
  let gameStats = {
    score: 0,
    bombHits: 0,
    iceHits: 0,
    flowersSkipped: 0,
    isGameOver: false,
  };

  // 自动处理游戏元素
  function handleGameElement(element) {
    if (!element || !element.item) return;

    const { type } = element.item;
    switch (type) {
      case "CLOVER":
        processFlower(element);
        break;
      case "BOMB":
        processBomb(element);
        break;
      case "FREEZE":
        processIce(element);
        break;
    }
  }

  function processFlower(element) {
    const shouldSkip = Math.random() < (GAME_SETTINGS.flowerSkipPercentage / 100);
    if (shouldSkip) {
      gameStats.flowersSkipped++;
    } else {
      gameStats.score++;
      clickElement(element);
    }
  }

  function processBomb(element) {
    if (gameStats.bombHits < GAME_SETTINGS.minBombHits) {
      gameStats.score = 0;
      clickElement(element);
      gameStats.bombHits++;
    }
  }

  function processIce(element) {
    if (gameStats.iceHits < GAME_SETTINGS.minIceHits) {
      clickElement(element);
      gameStats.iceHits++;
    }
  }

  function clickElement(element) {
    element.onClick(element);
    element.isExplosion = true;
    element.addedAt = performance.now();
  }

  function checkGameCompletion() {
    const rewardElement = document.querySelector('#app > div > div > div.content > div.reward');
    if (rewardElement && !gameStats.isGameOver) {
      gameStats.isGameOver = true;
      resetGameStats();
    }
  }

  function resetGameStats() {
    gameStats = {
      score: 0,
      bombHits: 0,
      iceHits: 0,
      flowersSkipped: 0,
      isGameOver: false,
    };
  }

  function getNewGameDelay() {
    return Math.floor(Math.random() * (GAME_SETTINGS.maxDelayMs - GAME_SETTINGS.minDelayMs + 1) + GAME_SETTINGS.minDelayMs);
  }

  function checkAndClickPlayButton() {
    const playButtons = document.querySelectorAll('button.kit-button.is-large.is-primary, a.play-btn[href="/game"], button.kit-button.is-large.is-primary');

    playButtons.forEach(button => {
      if (!isGamePaused && GAME_SETTINGS.autoClickPlay && (/Play/.test(button.textContent) || /Continue/.test(button.textContent))) {
        setTimeout(() => {
          button.click();
          gameStats.isGameOver = false;
        }, getNewGameDelay());
      }
    });
  }

  function continuousPlayButtonCheck() {
    checkAndClickPlayButton();
    setTimeout(continuousPlayButtonCheck, 1000);
  }

  continuousPlayButtonCheck();
})();
\`;

// 将脚本注入到 HTML 文档中
$response.body = body.replace('</body>', \`<script>\${script}</script></body>\`);
$done({ body });
"
